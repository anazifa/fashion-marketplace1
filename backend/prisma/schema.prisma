// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  collections Collection[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  mainImage   String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand       Brand       @relation(fields: [brandId], references: [id])
  brandId     String
  collection  Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?
  seller      User        @relation(fields: [sellerId], references: [id])
  sellerId    String
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ProductVariant {
  id        String   @id @default(uuid())
  size      String
  color     String
  stock     Int
  sku       String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Collection {
  id          String    @id @default(uuid())
  name        String
  description String?
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  items             OrderItem[]
  status            String      @default("PENDING")
  total             Float
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  street        String
  city          String
  state         String
  country       String
  zipCode       String
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 